/*
Navicat MySQL Data Transfer

Source Server         : node-b
Source Server Version : 50626
Source Host           : localhost:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50626
File Encoding         : 65001

Date: 2015-09-17 11:00:55
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `abcxyz`
-- ----------------------------
DROP TABLE IF EXISTS `abcxyz`;
CREATE TABLE `abcxyz` (
  `id` int(8) unsigned NOT NULL AUTO_INCREMENT,
  `time` datetime DEFAULT NULL,
  `content` varchar(1024) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of abcxyz
-- ----------------------------
INSERT INTO `abcxyz` VALUES ('1', '2015-09-17 09:40:42', '<p>我不管你是谁的谁是你的我是我的，让心跳动次动次动次动次像是活着。</p>');
INSERT INTO `abcxyz` VALUES ('2', '2015-09-17 09:51:27', '<p>&nbsp;&nbsp;&nbsp;&nbsp;优秀的人就像一团光芒，和他们呆久了，也就不再想走回黑暗了。<br/></p>');

-- ----------------------------
-- Table structure for `article`
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `id` int(6) unsigned NOT NULL AUTO_INCREMENT COMMENT '文章ID',
  `title` varchar(64) DEFAULT NULL,
  `type` varchar(16) DEFAULT NULL COMMENT '文章类型',
  `time` datetime DEFAULT NULL COMMENT '发表时间',
  `summary` varchar(512) DEFAULT NULL COMMENT '文章概要',
  `rcount` int(6) unsigned DEFAULT '0' COMMENT '点击次数',
  `content` text,
  `author` varchar(24) DEFAULT NULL,
  `path` varchar(64) DEFAULT NULL,
  `labels` int(6) unsigned DEFAULT NULL COMMENT '标签列表',
  `comments` int(6) unsigned DEFAULT NULL COMMENT '评论列表',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('24', 'C语言发展史', 'C', '2015-09-11 15:38:09', 'C语言之所以命名为C，是因为 C语言源自Ken Thompson发明的B语言，而 B语言则源自BCPL语言。', '108', '<p>C语言之所以命名为C，是因为 C语言源自<a target=\"_blank\" href=\"http://baike.baidu.com/view/1664692.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">Ken Thompson</a>发明的<a target=\"_blank\" href=\"http://baike.baidu.com/view/102257.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">B语言</a>，而 B语言则源自BCPL语言。</p><p>1967年，<a target=\"_blank\" href=\"http://baike.baidu.com/view/13714.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">剑桥大学</a>的Martin Richards对CPL语言进行了简化，于是产生了BCPL（Basic Combined Programming Language）语言。</p><p><a class=\"image-link\" nslog-type=\"9317\" href=\"http://baike.baidu.com/picture/1219/1219/0/54fbb2fb43166d22aa95730c462309f79152d24c.html?fr=lemma&ct=single\" target=\"_blank\" title=\"c语言宣传图\" style=\"color: rgb(19, 110, 194); text-decoration: none; display: block; width: 220px; height: 165px; \"><img class=\"\" src=\"http://f.hiphotos.baidu.com/baike/s%3D220/sign=9652fadf3912b31bc36cca2bb6193674/54fbb2fb43166d22aa95730c462309f79152d24c.jpg\" alt=\"c语言宣传图\" style=\"border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; width: 220px; height: 165px; \"/></a><span class=\"description\" style=\"display: block; color: rgb(85, 85, 85); text-align: left; font-size: 12px; text-indent: 0px; font-family: 宋体; font-weight: 400; word-wrap: break-word; word-break: break-all; font-style: normal; line-height: 15px; padding-top: 8px; padding-right: 7px; padding-bottom: 8px; padding-left: 7px; min-height: 12px; border-top-width: 1px; border-top-style: solid; border-top-color: rgb(224, 224, 224); \">c语言宣传图</span></p><p>20世纪60年代，美国<a target=\"_blank\" href=\"http://baike.baidu.com/view/259956.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">AT&amp;T</a>公司<a target=\"_blank\" href=\"http://baike.baidu.com/view/37115.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">贝尔实验室</a>（AT&amp;T Bell Laboratory）的研究员<a target=\"_blank\" href=\"http://baike.baidu.com/view/1664692.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">Ken Thompson</a>闲来无事，手痒难耐，想玩一个他自己编的，模拟在太阳系航行的电子游戏——Space Travel。他背着老板，找到了台空闲的机器——<a target=\"_blank\" href=\"http://baike.baidu.com/view/7347888.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">PDP-7</a>。但这台机器没有操作系统，而游戏必须使用操作系统的一些功能，于是他着手为PDP-7开发操作系统。后来，这个操作系统被命名为——<a target=\"_blank\" href=\"http://baike.baidu.com/view/8095.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">UNIX</a>。</p><p>1970年，美国贝尔实验室的 Ken Thompson，以<a target=\"_blank\" href=\"http://baike.baidu.com/view/602755.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">BCPL</a>语言为基础，设计出很简单且很接近硬件的B语言（取BCPL的首字母）。并且他用B语言写了第一个UNIX操作系统。</p><p>1971年，同样酷爱Space Travel的<a target=\"_blank\" href=\"http://baike.baidu.com/view/2018035.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">Dennis M.Ritchie</a>为了能早点儿玩上游戏，加入了<a target=\"_blank\" href=\"http://baike.baidu.com/view/1074227.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">Thompson</a>的开发项目，合作开发UNIX。他的主要工作是改造B语言，使其更成熟。<sup style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; white-space: nowrap; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding-top: 0px; padding-right: 2px; padding-bottom: 0px; padding-left: 2px; \">[2]</sup><a class=\"sup-anchor\" name=\"ref_[2]_1219\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: relative; top: -50px; font-size: 0px; line-height: 0; \">&nbsp;</a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a></p><p>1972年，美国<a target=\"_blank\" href=\"http://baike.baidu.com/view/37115.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">贝尔实验室</a>的 D.M.Ritchie 在B语言的基础上最终设计出了一种新的语言，他取了BCPL的第二个字母作为这种语言的名字，这就是C语言。</p><p>1973年初，C语言的主体完成。Thompson和Ritchie迫不及待地开始用它完全重写了<a target=\"_blank\" href=\"http://baike.baidu.com/view/8095.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">UNIX</a>。此时，编程的乐趣使他们已经完全忘记了那个&quot;Space Travel&quot;，一门心思地投入到了UNIX和C语言的开发中。随着UNIX的发展，C语言自身也在不断地完善。直到今天，各种版本的UNIX内核和周边工具仍然使用C语言作为最主要的开发语言，其中还有不少继承Thompson和Ritchie之手的代码。<sup style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; white-space: nowrap; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding-top: 0px; padding-right: 2px; padding-bottom: 0px; padding-left: 2px; \">[2]</sup><a class=\"sup-anchor\" name=\"ref_[2]_1219\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: relative; top: -50px; font-size: 0px; line-height: 0; \">&nbsp;</a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a></p><p>在开发中，他们还考虑把<a target=\"_blank\" href=\"http://baike.baidu.com/view/8095.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">UNIX</a>移植到其他类型的计算机上使用。C语言强大的移植性（Portability）在此显现。机器语言和汇编语言都不具有移植性，为<a target=\"_blank\" href=\"http://baike.baidu.com/view/339142.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">x86</a>开发的程序，不可能在Alpha,<a target=\"_blank\" href=\"http://baike.baidu.com/view/579625.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">SPARC</a>和<a target=\"_blank\" href=\"http://baike.baidu.com/subview/11200/5358919.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">ARM</a>等机器上运行。而C语言程序则可以使用在任意架构的<a target=\"_blank\" href=\"http://baike.baidu.com/view/50152.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">处理器</a>上，只要那种架构的处理器具有对应的C语言<a target=\"_blank\" href=\"http://baike.baidu.com/view/487018.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">编译器</a>和库，然后将C源代码<a target=\"_blank\" href=\"http://baike.baidu.com/view/69568.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">编译</a>、<a target=\"_blank\" href=\"http://baike.baidu.com/subview/543312/10455535.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">连接</a>成目标<a target=\"_blank\" href=\"http://baike.baidu.com/view/1473761.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">二进制文件</a>之后即可运行。<sup style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; white-space: nowrap; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding-top: 0px; padding-right: 2px; padding-bottom: 0px; padding-left: 2px; \">[2]</sup><a class=\"sup-anchor\" name=\"ref_[2]_1219\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: relative; top: -50px; font-size: 0px; line-height: 0; \">&nbsp;</a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a></p><p>1977年，<a target=\"_blank\" href=\"http://baike.baidu.com/view/2018035.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">Dennis M.Ritchie</a>发表了不依赖于具体机器系统的C语言编译文本《可移植的C语言编译程序》。<sup style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; white-space: nowrap; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding-top: 0px; padding-right: 2px; padding-bottom: 0px; padding-left: 2px; \">[3]</sup><a class=\"sup-anchor\" name=\"ref_[3]_1219\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: relative; top: -50px; font-size: 0px; line-height: 0; \">&nbsp;</a></p><p>C语言继续发展，在1982年，很多有识之士和<a target=\"_blank\" href=\"http://baike.baidu.com/view/1039836.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">美国国家标准协会</a>为了使这个语言健康地发展下去，决定成立C标准委员会，建立C语言的标准。委员会由硬件厂商，编译器及其他软件工具生产商，软件设计师，顾问，学术界人士，C语言作者和应用程序员组成。1989年，<a target=\"_blank\" href=\"http://baike.baidu.com/subview/185282/6215665.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">ANSI</a>发布了第一个完整的C语言标准——ANSI X3.159—1989，简称“C89”，不过人们也习惯称其为“<a target=\"_blank\" href=\"http://baike.baidu.com/view/3979609.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">ANSI C</a>”。C89在1990年被<a target=\"_blank\" href=\"http://baike.baidu.com/view/333080.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">国际标准组织</a>ISO(International Organization for Standardization)一字不改地采纳，ISO官方给予的名称为：ISO/IEC 9899，所以ISO/IEC9899: 1990也通常被简称为“C90”。1999年，在做了一些必要的修正和完善后，ISO发布了新的C语言标准，命名为ISO/IEC 9899：1999，简称“<a target=\"_blank\" href=\"http://baike.baidu.com/view/1967819.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">C99</a>”。<sup style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; white-space: nowrap; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding-top: 0px; padding-right: 2px; padding-bottom: 0px; padding-left: 2px; \">[2]</sup><a class=\"sup-anchor\" name=\"ref_[2]_1219\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: relative; top: -50px; font-size: 0px; line-height: 0; \">&nbsp;</a>&nbsp;<a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a><a name=\"ref_2\" style=\"color: rgb(19, 110, 194); text-decoration: none; \"></a>在2011年12月8日，ISO又正式发布了新的标准，称为ISO/IEC9899: 2011，简称为“<a target=\"_blank\" href=\"http://baike.baidu.com/view/8649361.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">C11</a>”。</p><p><br/></p>', '百度百科', null, null, null);
INSERT INTO `article` VALUES ('25', 'C语言语言标准', 'C', '2015-09-11 15:39:26', 'K&R C  起初，C语言没有官方标准。1978年由美国电话电报公司(AT&T）贝尔实验室正式发表了C语言。布莱恩·柯林汉（Brian Kernighan） 和 丹尼斯·里奇（Dennis Ritchie） 出版了一本书，名叫《The C Programming Language》。这本书被 C语言开发者们称为K&R，很多年来被当作 C语言的非正式的标准说明。人们称这个版本的 C语言为K&R C。[3] ', '2', '<h3 class=\"para-title level-3\" style=\"margin-top: 20px; margin-right: 0px; margin-bottom: 12px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-size: 18px; color: rgb(51, 51, 51); font-family: &#39;Microsoft YaHei&#39;, SimHei, Verdana; line-height: 19px; clear: both; font-weight: 500; \"><span class=\"title-text\">K&amp;R C</span></h3><p>起初，C语言没有官方标准。1978年由<a target=\"_blank\" href=\"http://baike.baidu.com/view/190900.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">美国电话电报公司</a>(AT&amp;T）贝尔实验室正式发表了C语言。布莱恩·柯林汉（Brian Kernighan） 和 丹尼斯·里奇（Dennis Ritchie） 出版了一本书，名叫《<a target=\"_blank\" href=\"http://baike.baidu.com/view/5012996.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">The C Programming Language</a>》。这本书被 C语言开发者们称为<strong style=\"font-weight: 700; \">K&amp;R</strong>，很多年来被当作 C语言的非正式的标准说明。人们称这个版本的 C语言为<strong style=\"font-weight: 700; \">K&amp;R C</strong>。<sup style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; white-space: nowrap; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding-top: 0px; padding-right: 2px; padding-bottom: 0px; padding-left: 2px; \">[3]</sup><a class=\"sup-anchor\" name=\"ref_[3]_1219\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: relative; top: -50px; font-size: 0px; line-height: 0; \">&nbsp;</a></p><p>K&amp;R C主要介绍了以下特色：</p><p><a target=\"_blank\" href=\"http://baike.baidu.com/view/204974.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">结构体</a>（struct）类型</p><p>长整数（long int）类型</p><p>无符号整数（unsigned int）类型</p><p>把运算符=+和=-改为+=和-=。因为=+和=-会使得编译器不知道使用者要处理i = -10还是i =- 10，使得处理上产生混淆。</p><p>即使在后来<a target=\"_blank\" href=\"http://baike.baidu.com/view/3979609.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">ANSI C</a>标准被提出的许多年后，K&amp;R C仍然是许多编译器的最 准要求，许多老旧的编译器仍然运行K&amp;R C的标准。</p><p><a name=\"3_2\" class=\"lemma-anchor para-title\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: absolute; top: -50px; \"></a><a name=\"sub1219_3_2\" class=\"lemma-anchor \" style=\"color: rgb(19, 110, 194); text-decoration: none; position: absolute; top: -50px; \"></a><a name=\"ANSI C / C89标准\" class=\"lemma-anchor \" style=\"color: rgb(19, 110, 194); text-decoration: none; position: absolute; top: -50px; \"></a></p><h3 class=\"para-title level-3\" style=\"margin-top: 20px; margin-right: 0px; margin-bottom: 12px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-size: 18px; color: rgb(51, 51, 51); font-family: &#39;Microsoft YaHei&#39;, SimHei, Verdana; line-height: 19px; clear: both; font-weight: 500; \"><span class=\"title-text\">ANSI C / C89标准</span></h3><p>1970到80年代，C语言被广泛应用，从大型主机到小型微机，也衍生了C语言的很多不同版本。</p><p>1983年，美国国家标准协会（ANSI）成立了一个委员会X3J11，来制定 C语言标准。<sup style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; white-space: nowrap; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding-top: 0px; padding-right: 2px; padding-bottom: 0px; padding-left: 2px; \">[4]</sup><a class=\"sup-anchor\" name=\"ref_[4]_1219\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: relative; top: -50px; font-size: 0px; line-height: 0; \">&nbsp;</a></p><p>1989年，美国国家标准协会（ANSI）通过了C语言标准，被称为<strong style=\"font-weight: 700; \">ANSI X3.159-1989 &quot;Programming Language C&quot;</strong>。因为这个标准是1989年通过的，所以一般简称<strong style=\"font-weight: 700; \">C89标准</strong>。有些人也简称<strong style=\"font-weight: 700; \">ANSI C</strong>，因为这个标准是美国国家标准协会（ANSI）发布的。</p><p>1990年，<a target=\"_blank\" href=\"http://baike.baidu.com/view/42488.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">国际标准化组织</a>（ISO）和<a target=\"_blank\" href=\"http://baike.baidu.com/view/159311.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">国际电工委员会</a>（IEC）把C89标准定为C语言的国际标准，命名为<strong style=\"font-weight: 700; \">ISO/IEC 9899:1990 - Programming languages -- C</strong><sup style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; white-space: nowrap; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding-top: 0px; padding-right: 2px; padding-bottom: 0px; padding-left: 2px; \">[5]</sup><a class=\"sup-anchor\" name=\"ref_[5]_1219\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: relative; top: -50px; font-size: 0px; line-height: 0; \">&nbsp;</a>&nbsp;。因为此标准是在1990年发布的，所以有些人把简称作<strong style=\"font-weight: 700; \">C90标准</strong>。不过大多数人依然称之为<strong style=\"font-weight: 700; \">C89标准</strong>，因为此标准与ANSI C89标准完全等同。</p><p>1994年，国际标准化组织（ISO）和国际电工委员会（IEC）发布了C89标准修订版，名叫ISO/IEC 9899:1990/Cor 1:1994<sup style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; white-space: nowrap; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding-top: 0px; padding-right: 2px; padding-bottom: 0px; padding-left: 2px; \">[6]</sup><a class=\"sup-anchor\" name=\"ref_[6]_1219\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: relative; top: -50px; font-size: 0px; line-height: 0; \">&nbsp;</a>&nbsp;，有些人简称为<strong style=\"font-weight: 700; \">C94标准</strong>。</p><p>1995年，国际标准化组织（ISO）和国际电工委员会（IEC）再次发布了C89标准修订版，名叫ISO/IEC 9899:1990/Amd 1:1995 - C Integrity<sup style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; white-space: nowrap; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding-top: 0px; padding-right: 2px; padding-bottom: 0px; padding-left: 2px; \">[7]</sup><a class=\"sup-anchor\" name=\"ref_[7]_1219\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: relative; top: -50px; font-size: 0px; line-height: 0; \">&nbsp;</a>&nbsp;，有些人简称为<strong style=\"font-weight: 700; \">C95标准</strong>。</p><p><a name=\"3_3\" class=\"lemma-anchor para-title\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: absolute; top: -50px; \"></a><a name=\"sub1219_3_3\" class=\"lemma-anchor \" style=\"color: rgb(19, 110, 194); text-decoration: none; position: absolute; top: -50px; \"></a><a name=\"C99标准\" class=\"lemma-anchor \" style=\"color: rgb(19, 110, 194); text-decoration: none; position: absolute; top: -50px; \"></a></p><h3 class=\"para-title level-3\" style=\"margin-top: 20px; margin-right: 0px; margin-bottom: 12px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-size: 18px; color: rgb(51, 51, 51); font-family: &#39;Microsoft YaHei&#39;, SimHei, Verdana; line-height: 19px; clear: both; font-weight: 500; \"><span class=\"title-text\">C99标准</span></h3><p>1999年1月，国际标准化组织（ISO）和国际电工委员会（IEC）发布了C语言的新标准，名叫<strong style=\"font-weight: 700; \">ISO/IEC 9899:1999 - Programming languages -- C</strong>&nbsp;<sup style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; white-space: nowrap; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding-top: 0px; padding-right: 2px; padding-bottom: 0px; padding-left: 2px; \">[8]</sup><a class=\"sup-anchor\" name=\"ref_[8]_1219\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: relative; top: -50px; font-size: 0px; line-height: 0; \">&nbsp;</a>&nbsp;，简称<strong style=\"font-weight: 700; \">C99标准</strong>。这是C语言的第二个官方标准。</p><p>在C99中包括的特性有：</p><ul class=\"custom_dot para-list list-paddingleft-1\" style=\"list-style-type: none; \"><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>增加了对编译器的限制，比如源程序每行要求至少支持到 4095 字节，变量名函数名的要求支持到 63 字节（extern 要求支持到 31）。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>增强了预处理功能。例如：</p></li><ul class=\"custom_dash list-paddingleft-2\" style=\"list-style-type: none; \"><li class=\"list-dash list-dash-paddingleft\" style=\"\"><p>宏支持取可变参数 #define Macro(...) __VA_ARGS__</p></li><li class=\"list-dash list-dash-paddingleft\" style=\"\"><p>使用宏的时候，允许省略参数，被省略的参数会被扩展成空串。</p></li><li class=\"list-dash list-dash-paddingleft\" style=\"\"><p>支持 // 开头的单行注释（这个特性实际上在C89的很多编译器上已经被支持了）</p></li></ul><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>增加了新关键字 restrict, inline, _Complex, _Imaginary, _Bool</p></li><ul class=\"custom_dash list-paddingleft-2\" style=\"list-style-type: none; \"><li class=\"list-dash list-dash-paddingleft\" style=\"\"><p>支持 long long, long double _Complex, float _Complex 等类型</p></li></ul><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>支持不定长的数组，即数组长度可以在运行时决定，比如利用变量作为数组长度。声明时使用 int a[var] 的形式。不过考虑到效率和实现，不定长数组不能用在全局，或 struct 与 union 里。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>变量声明不必放在语句块的开头，for 语句提倡写成 for(int i=0;i&lt;100;++i) 的形式，即i 只在 for 语句块内部有效。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>允许采用（type_name）{xx,xx,xx} 类似于 C++ 的构造函数的形式构造匿名的结构体。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>复合<a target=\"_blank\" href=\"http://baike.baidu.com/view/1208327.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">字面量</a>：初始化结构的时候允许对特定的元素赋值，形式为：</p><p>struct test{int a[3]，b;} foo[] = { [0].a = {1}, [1].a = 2 };</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>struct test{int a, b, c, d;} foo = { .a = 1, .c = 3, 4, .b = 5 }; // 3,4 是对 .c,.d 赋值的</p></li></ul><ul class=\"para-list list-paddingleft-2\" style=\"list-style-type: none; \"><li><p>格式化字符串中，利用 \\u 支持 unicode 的字符。</p></li><li><p>支持 16 进制的浮点数的描述。</p></li><li><p><a target=\"_blank\" href=\"http://baike.baidu.com/view/410546.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">printf</a>&nbsp;<a target=\"_blank\" href=\"http://baike.baidu.com/view/1390039.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">scanf</a>&nbsp;的格式化串增加了对 long long int 类型的支持。</p></li><li><p>浮点数的内部数据描述支持了新标准，可以使用 #pragma 编译器指令指定。</p></li><li><p>除了已有的 __line__ __file__ 以外，增加了 __func__ 得到当前的函数名。</p></li><li><p>允许编译器化简非常数的表达式。</p></li><li><p>修改了 /% 处理负数时的定义，这样可以给出明确的结果，例如在C89中-22 / 7 = -3, -22% 7 = -1，也可以-22 / 7= -4, -22% 7 = 6。 而C99中明确为 -22 / 7 = -3, -22% 7 = -1，只有一种结果。</p></li><li><p>取消了函数返回类型默认为 int 的规定。</p></li><li><p>允许 struct 定义的最后一个数组不指定其长度，写做 [](flexible array member)。</p></li><li><p>const const int i 将被当作 const int i 处理。</p></li><li><p>增加和修改了一些标准头文件，比如定义 bool 的 &lt;stdbool.h&gt; ，定义一些标准长度的 int 的 &lt;inttypes.h&gt; ，定义复数的 &lt;complex.h&gt; ，定义宽字符的 &lt;wctype.h&gt; ，类似于泛型的数学函数 &lt;tgmath.h&gt;， 浮点数相关的 &lt;fenv.h&gt;。 在&lt;stdarg.h&gt; 增加了 va_copy 用于复制 ... 的参数。里增加了 struct tmx ，对 struct tm 做了扩展。</p></li><li><p>输入输出对宽字符以及长整数等做了相应的支持。</p></li><p><a target=\"_blank\" href=\"http://baike.baidu.com/subview/4848/6393900.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">GCC</a>和其它一些商业编译器支持<a target=\"_blank\" href=\"http://baike.baidu.com/view/1967819.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">C99</a>的大部分特性。</p></ul><p><a name=\"3_4\" class=\"lemma-anchor para-title\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: absolute; top: -50px; \"></a><a name=\"sub1219_3_4\" class=\"lemma-anchor \" style=\"color: rgb(19, 110, 194); text-decoration: none; position: absolute; top: -50px; \"></a><a name=\"C11标准\" class=\"lemma-anchor \" style=\"color: rgb(19, 110, 194); text-decoration: none; position: absolute; top: -50px; \"></a></p><h3 class=\"para-title level-3\" style=\"margin-top: 20px; margin-right: 0px; margin-bottom: 12px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-size: 18px; color: rgb(51, 51, 51); font-family: &#39;Microsoft YaHei&#39;, SimHei, Verdana; line-height: 19px; clear: both; font-weight: 500; \"><span class=\"title-text\">C11标准</span></h3><ul class=\"para-list list-paddingleft-2\" style=\"list-style-type: none; \"><p>2011年12月8日，国际标准化组织（ISO）和国际电工委员会（IEC）再次发布了C语言的新标准，名叫<strong style=\"font-weight: 700; \">ISO/IEC 9899:2011 - Information technology -- Programming languages -- C</strong>&nbsp;<sup style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; white-space: nowrap; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding-top: 0px; padding-right: 2px; padding-bottom: 0px; padding-left: 2px; \">[9]</sup><a class=\"sup-anchor\" name=\"ref_[9]_1219\" style=\"color: rgb(19, 110, 194); text-decoration: none; position: relative; top: -50px; font-size: 0px; line-height: 0; \">&nbsp;</a>&nbsp;，简称<strong style=\"font-weight: 700; \">C11标准</strong>，原名<strong style=\"font-weight: 700; \">C1X</strong>。这是C语言的第三个官方标准，也是C语言的最新标准。</p><p>新的标准提高了对C++的兼容性，并增加了一些新的特性。这些新特性包括：</p><ul class=\"custom_dot para-list list-paddingleft-1\" style=\"list-style-type: none; \"><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p><a target=\"_blank\" href=\"http://baike.baidu.com/view/925608.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">对齐</a>处理(Alignment)的标准化(包括_Alignas标志符，alignof<a target=\"_blank\" href=\"http://baike.baidu.com/view/425996.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">运算符</a>, aligned_alloc函数以及&lt;stdalign.h&gt;<a target=\"_blank\" href=\"http://baike.baidu.com/view/668911.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">头文件</a>。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>_Noreturn 函数标记，类似于 gcc 的 __attribute__((noreturn))。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>_Generic 关键字。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>多线程(Multithreading)支持，包括：</p></li><ul class=\"custom_dash list-paddingleft-2\" style=\"list-style-type: none; \"><li class=\"list-dash list-dash-paddingleft\" style=\"\"><p>_Thread_local存储类型标识符，&lt;threads.h&gt;头文件，里面包含了线程的创建和管理函数。</p></li><li class=\"list-dash list-dash-paddingleft\" style=\"\"><p>_Atomic类型修饰符和&lt;stdatomic.h&gt;头文件。</p></li></ul><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>增强的<a target=\"_blank\" href=\"http://baike.baidu.com/view/40801.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">Unicode</a>的支持。基于C Unicode技术报告ISO/IEC TR 19769:2004，增强了对Unicode的支持。包括为<a target=\"_blank\" href=\"http://baike.baidu.com/view/497266.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">UTF-16</a>/<a target=\"_blank\" href=\"http://baike.baidu.com/view/1453325.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">UTF-32</a>编码增加了char16_t和char32_t数据类型，提供了包含<a target=\"_blank\" href=\"http://baike.baidu.com/view/40801.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">unicode</a>字符串转换函数的头文件&lt;uchar.h&gt;.</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>删除了&nbsp;<a target=\"_blank\" href=\"http://baike.baidu.com/view/1457521.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">gets</a>() 函数，使用一个新的更安全的函数gets_s()替代。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>增加了边界检查函数接口，定义了新的安全的函数，例如 fopen_s()，strcat_s() 等等。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>增加了更多浮点处理宏。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>匿名结构体/联合体支持。这个在<a target=\"_blank\" href=\"http://baike.baidu.com/subview/4848/6393900.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">gcc</a>早已存在，<a target=\"_blank\" href=\"http://baike.baidu.com/view/8649361.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">C11</a>将其引入标准。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>静态断言(static assertions)，_Static_assert()，在解释 #if 和 #error 之后被处理。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>新的&nbsp;<a target=\"_blank\" href=\"http://baike.baidu.com/view/656681.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">fopen</a>() 模式，(“…x”)。类似 POSIX 中的 O_CREAT|O_EXCL，在文件锁中比较常用。</p></li><li class=\"list-dot list-dot-paddingleft\" style=\"\"><p>新增 quick_exit() 函数作为第三种终止程序的方式。当&nbsp;<a target=\"_blank\" href=\"http://baike.baidu.com/view/619980.htm\" style=\"color: rgb(19, 110, 194); text-decoration: none; \">exit</a>()失败时可以做最少的清理工作。</p></li></ul></ul><p><br/></p>', '百度百科', null, null, null);
INSERT INTO `article` VALUES ('26', 'JS数组方法汇总 ARRAY数组元素的添加和删除', 'JS', '2015-09-17 09:57:32', 'js数组元素的添加和删除一直比较迷惑，今天终于找到详细说明的资料了，先给个我测试的代码^-^', '0', '<p><span style=\"font-family: Arial; font-size: 12px; line-height: 18px; \"></span></p><table style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: silver; border-right-color: silver; border-bottom-color: silver; border-left-color: silver; border-collapse: collapse; word-break: break-word; table-layout: auto; \"><tbody><tr><td style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: silver; border-right-color: silver; border-bottom-color: silver; border-left-color: silver; border-collapse: collapse; padding-top: 3px; padding-right: 3px; padding-bottom: 3px; padding-left: 3px; font-family: Arial; word-wrap: break-word; word-break: break-all; visibility: visible !important; filter: none; font-size: 12px; line-height: 18px; \"><p style=\"margin-top: 10px; margin-right: auto; margin-bottom: 10px; margin-left: auto; line-height: normal; font-size: 1em; text-indent: 0px; \"><br style=\"line-height: normal; \"/>var arr = new Array();<br style=\"line-height: normal; \"/>arr[0] = &quot;aaa&quot;;<br style=\"line-height: normal; \"/>arr[1] = &quot;bbb&quot;;<br style=\"line-height: normal; \"/>arr[2] = &quot;ccc&quot;;<br style=\"line-height: normal; \"/>//alert(arr.length);//3<br style=\"line-height: normal; \"/>arr.pop();<br style=\"line-height: normal; \"/>//alert(arr.length);//2<br style=\"line-height: normal; \"/>//alert(arr[arr.length-1]);//bbb<br style=\"line-height: normal; \"/>arr.pop();<br style=\"line-height: normal; \"/>//alert(arr[arr.length-1]);//aaa<br style=\"line-height: normal; \"/>//alert(arr.length);//1</p><p style=\"margin-top: 10px; margin-right: auto; margin-bottom: 10px; margin-left: auto; line-height: normal; font-size: 1em; text-indent: 0px; \">var arr2 = new Array();<br style=\"line-height: normal; \"/>//alert(arr2.length);//0<br style=\"line-height: normal; \"/>arr2[0] = &quot;aaa&quot;;<br style=\"line-height: normal; \"/>arr2[1] = &quot;bbb&quot;;<br style=\"line-height: normal; \"/>//alert(arr2.length);//2<br style=\"line-height: normal; \"/>arr2.pop();<br style=\"line-height: normal; \"/>//alert(arr2.length);//1<br style=\"line-height: normal; \"/>arr2 = arr2.slice(0,arr2.length-1);&nbsp;<br style=\"line-height: normal; \"/>//alert(arr2.length);//0<br style=\"line-height: normal; \"/>arr2[0] = &quot;aaa&quot;;<br style=\"line-height: normal; \"/>arr2[1] = &quot;bbb&quot;;<br style=\"line-height: normal; \"/>arr2[2] = &quot;ccc&quot;;<br style=\"line-height: normal; \"/>arr2 = arr2.slice(0,1);&nbsp;<br style=\"line-height: normal; \"/>alert(arr2.length);//1<br style=\"line-height: normal; \"/>alert(arr2[0]);//aaa<br style=\"line-height: normal; \"/>alert(arr2[1]);//undefined</p><p style=\"margin-top: 10px; margin-right: auto; margin-bottom: 10px; margin-left: auto; line-height: normal; font-size: 1em; text-indent: 0px; \"><br/></p><p style=\"margin-top: 10px; margin-right: auto; margin-bottom: 10px; margin-left: auto; line-height: normal; font-size: 1em; text-indent: 0px; \">shift：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined&nbsp;<br style=\"line-height: normal; \"/>var a = [1,2,3,4,5];&nbsp;<br style=\"line-height: normal; \"/>var b = a.shift(); //a：[2,3,4,5]&nbsp;&nbsp; b：1&nbsp;<br style=\"line-height: normal; \"/><br style=\"line-height: normal; \"/><span style=\"color:#ff0000;line-height: normal; \">unshift：将参数添加到原数组开头，并返回数组的长度</span>&nbsp;<br style=\"line-height: normal; \"/>var a = [1,2,3,4,5];&nbsp;<br style=\"line-height: normal; \"/>var b = a.unshift(-2,-1); //a：[-2,-1,1,2,3,4,5]&nbsp;&nbsp; b：7&nbsp;<br style=\"line-height: normal; \"/>注：在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。&nbsp;<br style=\"line-height: normal; \"/><br style=\"line-height: normal; \"/>pop：删除原数组最后一项，并<span style=\"color:#ff0000;line-height: normal; \">返回删除元素的值</span>；如果数组为空则返回undefined&nbsp;<br style=\"line-height: normal; \"/>var a = [1,2,3,4,5];&nbsp;<br style=\"line-height: normal; \"/>var b = a.pop(); //a：[1,2,3,4]&nbsp;&nbsp; b：5 //不用返回的话直接调用就可以了<br style=\"line-height: normal; \"/><br style=\"line-height: normal; \"/>push：将参数添加到原数组末尾，并返回数组的长度&nbsp;<br style=\"line-height: normal; \"/>var a = [1,2,3,4,5];&nbsp;<br style=\"line-height: normal; \"/>var b = a.push(6,7); //a：[1,2,3,4,5,6,7]&nbsp;&nbsp; b：7&nbsp;<br style=\"line-height: normal; \"/><br style=\"line-height: normal; \"/>concat：返回一个新数组，是将参数添加到原数组中构成的&nbsp;<br style=\"line-height: normal; \"/>var a = [1,2,3,4,5];&nbsp;<br style=\"line-height: normal; \"/>var b = a.concat(6,7); //a：[1,2,3,4,5]&nbsp;&nbsp; b：[1,2,3,4,5,6,7]&nbsp;<br style=\"line-height: normal; \"/><br style=\"line-height: normal; \"/>splice(start,deleteCount,val1,val2,...)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,...&nbsp;<br style=\"line-height: normal; \"/>var a = [1,2,3,4,5];&nbsp;<br style=\"line-height: normal; \"/>var b = a.splice(2,2,7,8,9); //a：[1,2,7,8,9,5]&nbsp;&nbsp; b：[3,4]&nbsp;<br style=\"line-height: normal; \"/>var b = a.splice(0,1); //同shift&nbsp;<br style=\"line-height: normal; \"/>a.splice(0,0,-2,-1); var b = a.length; //同unshift&nbsp;<br style=\"line-height: normal; \"/>var b = a.splice(a.length-1,1); //同pop&nbsp;<br style=\"line-height: normal; \"/>a.splice(a.length,0,6,7); var b = a.length; //同push&nbsp;<br style=\"line-height: normal; \"/><br style=\"line-height: normal; \"/>reverse：将数组反序&nbsp;<br style=\"line-height: normal; \"/>var a = [1,2,3,4,5];&nbsp;<br style=\"line-height: normal; \"/>var b = a.reverse(); //a：[5,4,3,2,1]&nbsp;&nbsp; b：[5,4,3,2,1]&nbsp;<br style=\"line-height: normal; \"/><br style=\"line-height: normal; \"/>sort(orderfunction)：按指定的参数对数组进行排序&nbsp;<br style=\"line-height: normal; \"/>var a = [1,2,3,4,5];&nbsp;<br style=\"line-height: normal; \"/>var b = a.sort(); //a：[1,2,3,4,5]&nbsp;&nbsp; b：[1,2,3,4,5]&nbsp;<br style=\"line-height: normal; \"/><br style=\"line-height: normal; \"/>slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组&nbsp;<br style=\"line-height: normal; \"/>var a = [1,2,3,4,5];&nbsp;<br style=\"line-height: normal; \"/>var b = a.slice(2,5); //a：[1,2,3,4,5]&nbsp;&nbsp; b：[3,4,5]&nbsp;<br style=\"line-height: normal; \"/><br style=\"line-height: normal; \"/><span style=\"color:#ff0000;line-height: normal; \">join(separator)：将数组的元素组起一个字符串，</span>以separator为分隔符，省略的话则用默认用逗号为分隔符&nbsp;<br style=\"line-height: normal; \"/>var a = [1,2,3,4,5];&nbsp;<br style=\"line-height: normal; \"/>var b = a.join(&quot;|&quot;); //a：[1,2,3,4,5]&nbsp;&nbsp; b：&quot;1|2|3|4|5&quot;</p><p style=\"margin-top: 10px; margin-right: auto; margin-bottom: 10px; margin-left: auto; line-height: normal; font-size: 1em; text-indent: 0px; \">再给个利用数组模拟javaStringBuffer处理字符串的方法：</p><p style=\"margin-top: 10px; margin-right: auto; margin-bottom: 10px; margin-left: auto; line-height: normal; font-size: 1em; text-indent: 0px; \">/**<br style=\"line-height: normal; \"/>* 字符串处理函数<br style=\"line-height: normal; \"/>*/<br style=\"line-height: normal; \"/>function StringBuffer()<br style=\"line-height: normal; \"/>{<br style=\"line-height: normal; \"/>var arr = new Array;<br style=\"line-height: normal; \"/>this.append = function(str)<br style=\"line-height: normal; \"/>{<br style=\"line-height: normal; \"/>&nbsp;&nbsp;&nbsp; arr[arr.length] = str;&nbsp;<br style=\"line-height: normal; \"/>};<br style=\"line-height: normal; \"/><br style=\"line-height: normal; \"/>this.toString = function()<br style=\"line-height: normal; \"/>{<br style=\"line-height: normal; \"/>&nbsp;&nbsp;&nbsp; return arr.<span style=\"color:#ff0000;line-height: normal; \">join(&quot;&quot;);</span>&nbsp;//把append进来的数组ping成一个字符串<br style=\"line-height: normal; \"/>};<br style=\"line-height: normal; \"/>}</p><p style=\"margin-top: 10px; margin-right: auto; margin-bottom: 10px; margin-left: auto; line-height: normal; font-size: 1em; text-indent: 0px; \">今天在应用中突然发现join是一种把数组转换成字符串的好方法，故封装成对象使用了：</p><p style=\"margin-top: 10px; margin-right: auto; margin-bottom: 10px; margin-left: auto; line-height: normal; font-size: 1em; text-indent: 0px; \">/**<br style=\"line-height: normal; \"/>* 把数组转换成特定符号分割的字符串<br style=\"line-height: normal; \"/>*/<br style=\"line-height: normal; \"/>function arrayToString(arr,separator)<br style=\"line-height: normal; \"/>{<br style=\"line-height: normal; \"/>if(!separator) separator = &quot;&quot;;//separator为null则默认为空<br style=\"line-height: normal; \"/>&nbsp;&nbsp;&nbsp; return arr.join(separator);&nbsp;<br style=\"line-height: normal; \"/>}</p><p style=\"margin-top: 10px; margin-right: auto; margin-bottom: 10px; margin-left: auto; line-height: normal; font-size: 1em; text-indent: 0px; \">/**<br style=\"line-height: normal; \"/>* 查找数组包含的字符串<br style=\"line-height: normal; \"/>*/<br style=\"line-height: normal; \"/>function arrayFindString(arr,string)<br style=\"line-height: normal; \"/>{<br style=\"line-height: normal; \"/>var str = arr.join(&quot;&quot;);&nbsp;<br style=\"line-height: normal; \"/>&nbsp;&nbsp;&nbsp; return str.indexOf(string);&nbsp;<br style=\"line-height: normal; \"/>}</p></td></tr></tbody></table><p></p><p><br/></p>', '博客园', null, null, null);
INSERT INTO `article` VALUES ('27', 'js 数组Array用法', 'JS', '2015-09-17 09:59:27', 'js 数组Array用法', '0', '<p>&lt;script type=&quot;text/javascript&quot;&gt;</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var arr = new Array();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr[0] = &quot;aaa&quot;;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr[1] = &quot;bbb&quot;;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr[2] = &quot;ccc&quot;;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr.length);<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//3</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr.pop();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr.length);<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//2</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr[arr.length-1]);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//bbb</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr.pop();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr[arr.length-1]);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//aaa</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr.length);<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//1</p><p><br/></p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var arr2 = new Array();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr2.length);<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//0</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr2[0] = &quot;aaa&quot;;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr2[1] = &quot;bbb&quot;;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr2.length);<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//2</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr2.pop();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr2.length);<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//1</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr2[arr2.length-1]);<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//aaa</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>/*</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arrayObj.slice(start, [end]) &nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>slice 方法返回一个 Array 对象，其中包含了 arrayObj 的指定部分。&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>slice 方法一直复制到 end 所指定的元素，但是不包括该元素。如果 start 为负，将它作为 length + start处理，此处 length 为数组的长度。如果 end 为负，就将它作为 length + end 处理，此处 length 为数组的长度。如果省略 end ，那么 slice 方法将一直复制到 arrayObj 的结尾。<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>如果 end 出现在 start 之前，不复制任何元素到新数组中。&nbsp;</p><p>*/</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr2 = arr2.slice(0, arr2.length-1);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr2.length);<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//0</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr2[0] = &quot;aaa&quot;;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr2[1] = &quot;bbb&quot;;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr2[2] = &quot;ccc&quot;;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>arr2 = arr2.slice(0, 1);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr2.length);<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//1</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr2[0]);<span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>//aaa</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arr2[1]);<span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>//undefined</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//shift：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var a = [1,2,3,4,5];</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.shift();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b); <span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[2,3,4,5] &nbsp; b：1</p><p><br/></p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//unshift：将参数添加到原数组开头，并返回数组的长度.注：在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var a = [1,2,3,4,5];</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.unshift(-2,-1);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b); <span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[-2,-1,1,2,3,4,5] &nbsp; b：7</p><p><br/></p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//pop：删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var a = [1,2,3,4,5];</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.pop();&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b); <span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[1,2,3,4] &nbsp; b：5</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//push：将参数添加到原数组末尾，并返回数组的长度</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var a = [1,2,3,4,5];</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.push(6,7);&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b); <span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[1,2,3,4,5,6,7] &nbsp; b：7</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//concat：返回一个新数组，是将参数添加到原数组中构成的</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var a = [1,2,3,4,5];</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.concat(6,7);&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[1,2,3,4,5] &nbsp; b：[1,2,3,4,5,6,7]</p><p><br/></p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//splice(start,deleteCount,val1,val2,...)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,..., 返回的是删除项数组</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//在清空数组时，只需传递startIndex; 如果不删除所有元素，再传递deleteCount参数。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//splice还具有先删除后添加的功能，即先删除几个元素，然后在删除的位置再添加若干元素，删除与添加的元素的个数没有必须相等，这时侯deleteCount也是要用到的。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var a = [1,2,3,4,5];</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.splice(2,2,7,8,9); <span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>// 从下标2处开始，删除2量，并从2位置增加三项（7，8，9）</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[1,2,7,8,9,5] &nbsp; b：[3,4]</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.splice(0,1); //同shift</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[2,7,8,9,5] &nbsp; b：[1]</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var a = [1,2,3,4,5];</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>a.splice(0,0,-2,-1);&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.length;<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//同unshift</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[-2,-1,1,2,3,4,5] &nbsp; b：[7]</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.splice(a.length-1,1);//同pop</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[-2,-1,1,2,3,4] &nbsp; b：[5]</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>a.splice(a.length,0,6,7);&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.length; //同push</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[-2,-1,1,2,3,4,6,7] &nbsp; b：[8]</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//reverse：将数组反序</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var a = [1,2,3,4,5];</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.reverse();&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[5,4,3,2,1] &nbsp; b：[5,4,3,2,1]</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//sort(orderfunction)：按指定的参数对数组进行排序</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var a = [1,4,3,2,5];</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.sort();&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[1,2,3,4,5] &nbsp; b：[1,2,3,4,5]</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var a = [1,2,3,4,5];</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.slice(2,5);&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[1,2,3,4,5] &nbsp; b：[3,4,5]</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//join(separator)：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var a = [1,2,3,4,5];</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b = a.join(&quot;|&quot;);&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[1,2,3,4,5] &nbsp; b：&quot;1|2|3|4|5&quot;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var b2 = a.join();&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(a + &quot;; &quot; + b2);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//a：[1,2,3,4,5] &nbsp; b：&quot;1,2,3,4,5&quot;</p><p><br/></p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>// 字符串处理函数</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>function StringBuffer() {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>var arr = new Array;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>this.append = function(str) {</p><p>&nbsp; &nbsp; <span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>arr[arr.length] = str;</p><p>&nbsp; &nbsp; <span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>return this;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>};</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>this.toString = function() {</p><p>&nbsp; &nbsp; <span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>return arr.join(&quot;|&quot;);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//把append进来的数组ping成一个字符串</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>};</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var strBuf = new StringBuffer();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>strBuf.append(&quot;1&quot;).append(&quot;2&quot;).append(&quot;3&quot;);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>// strBuf.append(arg)</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>strBuf.append(&quot;4&quot;);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>strBuf.append(&quot;5&quot;);<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(strBuf.append(&quot;6&quot;).append(&quot;7&quot;).append(&quot;8&quot;).toString());<span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>// 1|2|3|4|5|6|7|8</p><p><br/></p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>// 把数组转换成特定符号分割的字符串</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>function arrayToString(arr, separator) {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>if(!separator)&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>separator = &quot;&quot;;<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//separator为null则默认为空</p><p>&nbsp; &nbsp; <span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>return arr.join(separator);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var arr = new Array(1, 3, 5);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arrayToString(arr, &quot;=&quot;));<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>// 1=3=5</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>// 查找数组包含的字符串</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>function arrayFindString(arr, string) {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>var str = arr.join(&quot;&quot;);</p><p>&nbsp; &nbsp; <span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>return str.indexOf(string);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var arr = new Array(1, 3, 5);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>alert(arrayFindString(arr, 3));<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>// 1</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p>&lt;/script&gt;</p><p><br/></p>', 'CSDN', null, null, null);

-- ----------------------------
-- Table structure for `comment`
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `id` int(6) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(32) DEFAULT NULL,
  `content` varchar(1024) DEFAULT NULL COMMENT '评论内容',
  `type` varchar(12) DEFAULT NULL COMMENT '评论类型',
  `parentid` int(6) unsigned DEFAULT NULL COMMENT '父id',
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('6', 'C语言测试', '我来测试一下测语言回复', null, '24', '2015-09-16 10:13:27');
INSERT INTO `comment` VALUES ('7', '留言板测试', '我来测试一下留言板', '', '0', '2015-09-16 10:13:28');
INSERT INTO `comment` VALUES ('8', '第二条回复', '这是c语言发展史的第二条回复，该回复在留言板页面不可见。', null, '24', '2015-09-16 12:49:49');
INSERT INTO `comment` VALUES ('9', '第三条回复', '本条回复不可见来吧，应该自动跳转到本页面', null, '24', '2015-09-16 12:56:07');
INSERT INTO `comment` VALUES ('10', '测试模态框', '模态框以及timeline显示', null, '0', '2015-09-16 15:35:56');
INSERT INTO `comment` VALUES ('11', '第四条评论', '第四条品论啊', null, '0', '2015-09-16 16:15:22');
INSERT INTO `comment` VALUES ('12', '第五条评论。', '第五条评论', null, '0', '2015-09-16 16:19:20');
INSERT INTO `comment` VALUES ('13', '第六条评论', '第六条稍微有点长的评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论评论论论论论论论论', null, '0', '2015-09-16 16:20:00');
INSERT INTO `comment` VALUES ('14', '第六条评论', '这是第六条评论', null, '0', '2015-09-16 16:39:35');
INSERT INTO `comment` VALUES ('15', '第七条品论', '这是第七条评论', null, '0', '2015-09-16 16:40:10');
INSERT INTO `comment` VALUES ('16', '第八条评论', '这是第八条评论了啊啊啊 ', null, '0', '2015-09-17 10:05:10');
INSERT INTO `comment` VALUES ('17', '第九条评论', '第九条评论测试', null, '0', '2015-09-17 10:10:37');
INSERT INTO `comment` VALUES ('18', '第十条评论', '第十条评论', null, '0', '2015-09-17 10:11:33');
INSERT INTO `comment` VALUES ('19', '十一', '十一了？', null, '0', '2015-09-17 10:12:07');
INSERT INTO `comment` VALUES ('20', '十二', '十二', null, '0', '2015-09-17 10:12:25');
